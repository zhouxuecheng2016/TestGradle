闭包的价值在于可以作为函数对象或者匿名函数，对于类型系统而言这就意味着不仅要表示数据还要表示代码。
支持闭包的多数语言都将函数作为第一级对象，就是说这些函数可以存储到变量中、作为参数传递给其他函数，
最重要的是能够被函数动态地创建和返回。
Javascript中闭包:

function a(){
　var i=0;
　function b(){
　  alert(++i);
　}
　return b;
}

var c = a();
c();

闭包的作用就是在a执行完并返回后，闭包使得Javascript的垃圾回收机制GC不会收回a所占用的资源，
因为a的内部函数b的执行需要依赖a中的变量.

如果a返回的不是函数b，情况就完全不同了。因为a执行完后，b没有被返回给a的外界，只是被a所引用，
而此时a也只会被b引用，因此函数a和b互相引用但又不被外界打扰(被外界引用)，函数a和b就会被GC回收。

闭包的应用场景:
1、保护函数内的变量安全。以最开始的例子为例，函数a中i只有函数b才能访问，
   而无法通过其他途径访问到，因此保护了i的安全性。
2、在内存中维持一个变量。依然如前例，由于闭包，函数a中i的一直存在于内存中，
   因此每次执行c()，都会给i自加1。



